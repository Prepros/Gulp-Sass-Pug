// Grid system
//
// Generate semantic grid columns with these mixins.

// Centered container element
=container-fixed($gutter: $grid-gutter-width)
  margin-right: auto
  margin-left: auto
  padding-left:  floor(($gutter / 2))
  padding-right: ceil(($gutter / 2))
  +clearfix()

// Creates a wrapper for a series of columns
=make-row($gutter: $grid-gutter-width)
  margin-left:  ceil(($gutter / -2))
  margin-right: floor(($gutter / -2))
  +clearfix()

// Generate the extra small columns
=make-xs-column($columns, $gutter: $grid-gutter-width)
  position: relative
  float: left
  width: percentage(($columns / $grid-columns))
  min-height: 1px
  padding-left:  ($gutter / 2)
  padding-right: ($gutter / 2)

=make-xs-column-offset($columns)
  margin-left: percentage(($columns / $grid-columns))

=make-xs-column-push($columns)
  left: percentage(($columns / $grid-columns))

=make-xs-column-pull($columns)
  right: percentage(($columns / $grid-columns))

// Generate the small columns
=make-sm-column($columns, $gutter: $grid-gutter-width)
  position: relative
  min-height: 1px
  padding-left:  ($gutter / 2)
  padding-right: ($gutter / 2)

  @media (min-width: $screen-sm)
    float: left
    width: percentage(($columns / $grid-columns))

=make-sm-column-offset($columns)
  @media (min-width: $screen-sm)
    margin-left: percentage(($columns / $grid-columns))

=make-sm-column-push($columns)
  @media (min-width: $screen-sm)
    left: percentage(($columns / $grid-columns))

=make-sm-column-pull($columns)
  @media (min-width: $screen-sm)
    right: percentage(($columns / $grid-columns))

// Generate the medium columns
=make-md-column($columns, $gutter: $grid-gutter-width)
  position: relative
  min-height: 1px
  padding-left:  ($gutter / 2)
  padding-right: ($gutter / 2)

  @media (min-width: $screen-md)
    float: left
    width: percentage(($columns / $grid-columns))

=make-md-column-offset($columns)
  @media (min-width: $screen-md)
    margin-left: percentage(($columns / $grid-columns))

=make-md-column-push($columns)
  @media (min-width: $screen-md)
    left: percentage(($columns / $grid-columns))

=make-md-column-pull($columns)
  @media (min-width: $screen-md)
    right: percentage(($columns / $grid-columns))

// Generate the large columns
=make-lg-column($columns, $gutter: $grid-gutter-width)
  position: relative
  min-height: 1px
  padding-left:  ($gutter / 2)
  padding-right: ($gutter / 2)

  @media (min-width: $screen-lg)
    float: left
    width: percentage(($columns / $grid-columns))

=make-lg-column-offset($columns)
  @media (min-width: $screen-lg)
    margin-left: percentage(($columns / $grid-columns))

=make-lg-column-push($columns)
  @media (min-width: $screen-lg)
    left: percentage(($columns / $grid-columns))

=make-lg-column-pull($columns)
  @media (min-width: $screen-lg)
    right: percentage(($columns / $grid-columns))


// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

// [converter] This is defined recursively in LESS, but Sass supports real loops
=make-grid-columns($i: 1, $list: ".col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}")
  @for $i from (1 + 1) through $grid-columns
    $list: "#{$list}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}"

  #{$list}
    position: relative
    // Prevent columns from collapsing when empty
    min-height: 1px
    // Inner gutter via padding
    padding-left:  ceil(($grid-gutter-width / 2))
    padding-right: floor(($grid-gutter-width / 2))


// [converter] This is defined recursively in LESS, but Sass supports real loops
=float-grid-columns($class, $i: 1, $list: ".col-#{$class}-#{$i}")
  @for $i from (1 + 1) through $grid-columns
    $list: "#{$list}, .col-#{$class}-#{$i}"

  #{$list}
    float: left


=calc-grid-column($index, $class, $type)
  @if ($type == width) and ($index > 0)
    .col-#{$class}-#{$index}
      width: percentage(($index / $grid-columns))

  @if ($type == push) and ($index > 0)
    .col-#{$class}-push-#{$index}
      left: percentage(($index / $grid-columns))

  @if ($type == push) and ($index == 0)
    .col-#{$class}-push-0
      left: auto

  @if ($type == pull) and ($index > 0)
    .col-#{$class}-pull-#{$index}
      right: percentage(($index / $grid-columns))

  @if ($type == pull) and ($index == 0)
    .col-#{$class}-pull-0
      right: auto

  @if ($type == offset)
    .col-#{$class}-offset-#{$index}
      margin-left: percentage(($index / $grid-columns))


// [converter] This is defined recursively in LESS, but Sass supports real loops
=loop-grid-columns($columns, $class, $type)
  @for $i from 0 through $columns
    +calc-grid-column($i, $class, $type)


// Create grid for specific class
=make-grid($class)
  +float-grid-columns($class)
  +loop-grid-columns($grid-columns, $class, width)
  +loop-grid-columns($grid-columns, $class, pull)
  +loop-grid-columns($grid-columns, $class, push)
  +loop-grid-columns($grid-columns, $class, offset)